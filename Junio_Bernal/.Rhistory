out <- tryCatch(
{
segmented(lm(respuesta ~ distancia, data=dt),
seg.Z = ~distancia)
},
error=function(cond) {
segmented.rl <- list()
segmented.rl$psi[2] <- NULL
return(segmented.rl)
}
)
return(out)
}
Datos_4k_BP_cl <- tibble()
for (condition in conditions) {
for (Nsujeto in 31:53) {
datos <- Datos_4k %>% filter(grepl(paste0(condition), condicion) & nsub == Nsujeto)
segmented.rl <- try_bp(datos)
#print(segmented.rl$psi[2])
if (!is.null(segmented.rl$psi[2]))
{
# Elimino Outliers
residuos <- residuals(segmented.rl)
rango_intercuartilico <- IQR(residuos)
umbral <- 1.5 * rango_intercuartilico
indices_outliers <- which(abs(residuos) > umbral)
if (length(indices_outliers)!=0)
{
datos_sin_outliers <- datos[-indices_outliers, ]
} else {
datos_sin_outliers <- datos
}
# Calculo de nuevo
segmented.rl <- segmented(lm(respuesta ~ distancia, data=datos_sin_outliers), seg.Z = ~distancia)
if (!is.null(segmented.rl$psi[2])){
# Agrego a tibble
Datos_4k_BP_cl <- rbind(Datos_4k_BP_cl, datos_sin_outliers %>%
mutate(bp = segmented.rl$psi[2], slope_dif=segmented.rl$coefficients[3] ) %>%
summarise(nsub,condicion,bp,slope_dif) %>%
unique()
)
}
}  else {
Datos_4k_BP_cl <- rbind(Datos_4k_BP_cl, datos %>%
mutate(bp = 0, slope_dif=0) %>%
summarise(nsub,condicion,slope_dif,bp) %>%
unique()
)
}
}
rm(indices_outliers,Nsujeto,rango_intercuartilico,residuos,umbral,modelo_segmentado,segmented.rl,datos,datos_sin_outliers)
}
rm(conditions, condition, indices_outliers,Nsujeto,rango_intercuartilico,residuos,umbral,
modelo_segmentado,segmented.rl,datos,datos_sin_outliers)
Datos_1k_BP <- tibble()
for (Nsujeto in 1:23) {
datos <- Datos_1k %>% filter(grepl(paste0("Wide-Wide"), condicion) & nsub == Nsujeto)
rl <- lm(respuesta ~ distancia, data=datos)
segmented.rl <- segmented(rl, seg.Z = ~distancia)
print(segmented.rl$psi[2])
if (!is.null(segmented.rl$psi[2]))
{
Datos_1k_BP <- rbind(Datos_1k_BP, datos %>%
mutate(bp = segmented.rl$psi[2], slope_dif=segmented.rl$coefficients[3] ) %>%
#group_by(nsub) %>%
summarise(nsub,condicion,nsub,slope_dif,bp) %>%
unique()
)
}
#HIGH
rm(datos,rl,segmented.rl)
datos <- Datos_1k %>% filter(grepl(paste0("High-High"), condicion) & nsub == Nsujeto)
rl <- lm(respuesta ~ distancia, data=datos)
segmented.rl <- segmented(rl, seg.Z = ~distancia)
print(segmented.rl$psi[2])
if (!is.null(segmented.rl$psi[2]))
{
Datos_1k_BP <- rbind(Datos_1k_BP, datos %>%
mutate(bp = segmented.rl$psi[2], slope_dif=segmented.rl$coefficients[3] ) %>%
#group_by(nsub) %>%
summarise(nsub,condicion,nsub,slope_dif,bp) %>%
unique()
)
}
rm(datos,rl,segmented.rl)
# LOW
datos <- Datos_1k %>% filter(grepl(paste0("Low-Low"), condicion) & nsub == Nsujeto)
rl <- lm(respuesta ~ distancia, data=datos)
segmented.rl <- segmented(rl, seg.Z = ~distancia)
print(segmented.rl$psi[2])
if (!is.null(segmented.rl$psi[2]))
{
Datos_1k_BP <- rbind(Datos_1k_BP, datos %>%
mutate(bp = segmented.rl$psi[2], slope_dif=segmented.rl$coefficients[3] ) %>%
#group_by(nsub) %>%
summarise(nsub,condicion,nsub,slope_dif,bp) %>%
unique()
)
}
rm(datos,rl,segmented.rl)
}
rm(Nsujeto)
Datos_4k_BP <- tibble()
for (Nsujeto in 31:53) {
datos <- Datos_4k %>% filter(grepl(paste0("Wide-Wide"), condicion) & nsub == Nsujeto)
rl <- lm(respuesta ~ distancia, data=datos)
segmented.rl <- segmented(rl, seg.Z = ~distancia)
print(segmented.rl$psi[2])
if (!is.null(segmented.rl$psi[2]) & !is.na(segmented.rl$coefficients[3]))
{
Datos_4k_BP <- rbind(Datos_4k_BP, datos %>%
mutate(bp = segmented.rl$psi[2], slope_dif=segmented.rl$coefficients[3] ) %>%
#group_by(nsub) %>%
summarise(nsub,condicion,nsub,slope_dif,bp) %>%
unique()
)
}
#HIGH
rm(datos,rl,segmented.rl)
datos <- Datos_4k %>% filter(grepl(paste0("High-High"), condicion) & nsub == Nsujeto)
rl <- lm(respuesta ~ distancia, data=datos)
segmented.rl <- segmented(rl, seg.Z = ~distancia)
print(segmented.rl$psi[2])
if (!is.null(segmented.rl$psi[2]) & !is.na(segmented.rl$coefficients[3]))
{
Datos_4k_BP <- rbind(Datos_4k_BP, datos %>%
mutate(bp = segmented.rl$psi[2], slope_dif=segmented.rl$coefficients[3] ) %>%
#group_by(nsub) %>%
summarise(nsub,condicion,nsub,slope_dif,bp) %>%
unique()
)
}
rm(datos,rl,segmented.rl)
# LOW
if(Nsujeto!=45)
{
datos <- Datos_4k %>%
filter(grepl(paste0("Low-Low"), condicion) & nsub == Nsujeto)
rl <- lm(respuesta ~ distancia, data=datos)
segmented.rl <- segmented(rl, seg.Z = ~distancia)
print(segmented.rl$psi[2])
if (!is.null(segmented.rl$psi[2]) & !is.na(segmented.rl$coefficients[3]))
{
Datos_4k_BP <- rbind(Datos_4k_BP, datos %>%
mutate(bp = segmented.rl$psi[2], slope_dif=segmented.rl$coefficients[3] ) %>%
#group_by(nsub) %>%
summarise(nsub,condicion,nsub,slope_dif,bp) %>%
unique()
)
}
rm(datos,rl,segmented.rl)
}
}
rm(Nsujeto)
plt_1k_bp <- ggplot(Datos_1k_BP_cl %>% filter(bp!=0), aes(x=condicion, y=bp, color=condicion)) +
geom_boxplot()+
labs(title="1k")+
theme_minimal()
plt_1k_bp
plt_4k_bp <- ggplot(Datos_4k_BP_cl %>% filter(bp!=0), aes(x=condicion, y=bp, color=condicion)) +
geom_boxplot()+
labs(title="4k")+
theme_minimal()
plt_4k_bp
ggarrange(plt_1k_bp,plt_4k_bp, common.legend = TRUE)
Wide_1k_bp <- Datos_1k_BP_cl %>% filter(condicion=="Wide-Wide") %>% filter(bp!=0)
Low_1k_bp <-Datos_1k_BP %>% filter(condicion=="Low-Low") %>% filter(bp!=0)
High_1k_bp <- Datos_1k_BP %>% filter(condicion=="High-High")%>% filter(bp!=0)
Wide_4k_bp <- Datos_4k_BP %>% filter(condicion=="Wide-Wide")%>% filter(bp!=0)
Low_4k_bp <-Datos_4k_BP %>% filter(condicion=="Low-Low")%>% filter(bp!=0)
High_4k_bp <- Datos_4k_BP %>% filter(condicion=="High-High")%>% filter(bp!=0)
t.test(x = Wide_1k_bp$bp, Low_1k_bp$bp)
t.test(x = Wide_1k_bp$bp, High_1k_bp$bp)
t.test(x = Wide_1k_bp$slope_dif, Low_1k_bp$slope_dif)
t.test(x = Wide_1k_bp$slope_dif, High_1k_bp$slope_dif)
t.test(x = Wide_4k_bp$bp, Low_4k_bp$bp)
t.test(x = Wide_4k_bp$bp, High_4k_bp$bp)
t.test(x = Wide_4k_bp$slope_dif, Low_4k_bp$slope_dif)
t.test(x = Wide_4k_bp$slope_dif, High_4k_bp$slope_dif)
t.test(x = Wide_4k_bp$slope_dif, subset(Low_4k_bp$slope_dif, Low_4k_bp$slope_dif>-6))
plt_1k_slope_dif <- ggplot(Datos_1k_BP_cl%>% filter(bp!=0), aes(x=condicion, y=slope_dif, color=condicion)) +
geom_boxplot()+
labs(title="Slopes 1k")+
theme_minimal()
#plt_1k_bp
plt_4k_slope_dif <- ggplot(Datos_4k_BP_cl%>% filter(bp!=0), aes(x=condicion, y=slope_dif, color=condicion)) +
geom_boxplot()+
labs(title="Slopes 4k")+
theme_minimal()
#plt_4k_bp
ggarrange(plt_1k_slope_dif,plt_4k_slope_dif, common.legend = TRUE)
Datos_1k_cl <- tibble()
Datos_1k_ols <- tibble() %>% mutate(nsub=0,distancia=0, respuesta=0)
Conditions = c("Low-Low", "Wide-Wide", "High-High")
for (Nsujeto in 1:23){
for (cond in Conditions){
datos <- Datos_1k %>%
filter(grepl(paste0(cond), condicion) & nsub == Nsujeto) %>%
mutate(distancia=log(distancia), respuesta=log(respuesta))
outliers_datos <- outliers_mcd(x=cbind(datos$distancia,datos$respuesta), h=.75)
datos_sinOutliers <- datos
for (i in 1:length(outliers_datos$outliers_val$X1)){
datos_sinOutliers <- datos_sinOutliers %>%     filter(distancia!=outliers_datos$outliers_val$X1[i] | respuesta!=outliers_datos$outliers_val$X2[i])
Datos_1k_ols <- Datos_1k_ols %>% add_row(nsub=Nsujeto, distancia=outliers_datos$outliers_val$X1[i],
respuesta=outliers_datos$outliers_val$X2[i])
}
Datos_1k_cl <- rbind(Datos_1k_cl,datos_sinOutliers)
}
}
rm(cond,Conditions,i,Nsujeto,rl,segmented.rl,outliers_datos,datos_sinOutliers, datos)
plt_1k_cl <- ggplot(Datos_1k_cl, aes(x=distancia,
y=respuesta,
color = condicion)) +
geom_point() +
geom_smooth(method=lm, se = FALSE) +
# scale_x_log10() +
# scale_y_log10() +
#geom_errorbar(aes(ymin=respuesta-std, ymax=respuesta+std), width = 0.2) +
# facet_grid(rows = vars(ID)) +
labs(title = "Curva de Distancia",
#subtitle = "Promedio y Barras de Error",
x = 'Distancia',
y = 'Respuesta') +
theme_classic()
plt_1k_cl
datos <- Datos_4k %>%
filter(grepl(paste0("Low-Low"), condicion) & nsub == 45) %>%
mutate(distancia=log(distancia), respuesta=log(respuesta))
outliers_datos <- outliers_mcd(x=cbind(datos$distancia,datos$respuesta), h=.75)
outliers_datos
plot_outliers_mcd(outliers_datos, x=cbind(datos$distancia,datos$respuesta))
rl <- lm(respuesta ~ distancia, data=datos)
summary(rl)
plot <- ggplot(data=datos, aes(x=distancia, y=respuesta)) +
geom_point() +
geom_smooth(method=lm, se = FALSE)
plot
datos_sinOutliers <- datos
for (i in 1:length(outliers_datos$outliers_val$X1)){
datos_sinOutliers <- datos_sinOutliers %>% filter(distancia!=outliers_datos$outliers_val$X1[i] | respuesta!=outliers_datos$outliers_val$X2[i])
}
rl <- lm(respuesta ~ distancia, data=datos_sinOutliers)
summary(rl)
plot <- ggplot(data=datos, aes(x=distancia, y=respuesta)) +
geom_point() +
geom_smooth(method=lm, se = FALSE)
plot
segmented.rl <- segmented(rl, seg.Z = ~distancia)
summary(segmented.rl)
datos <- Datos_4k %>% filter(grepl(paste0("Low-Low"), condicion) & nsub == 46)
# Realizar la regresi√≥n segmentada
segmented.rl <- segmented(lm(respuesta ~ distancia, data = datos), seg.Z = ~ distancia)
segmented.rl <- try_bp(datos)
# Obtener los residuos del modelo segmentado
residuos <- residuals(modelo_segmentado)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(here)
library(ggplot2)
library(plotrix)
library(segmented)
library(Routliers)
library(tidyverse)
library(ggpubr)
library(car)
library(data.table)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(here)
library(ggplot2)
library(plotrix)
library(segmented)
library(Routliers)
library(tidyverse)
library(ggpubr)
library(car)
library(data.table)
dir_1k <- "./Data_1k"
data_1k <-
list.files(path=dir_1k, pattern = "*.csv",full.names = TRUE) %>%
map_df(~fread(.) %>% mutate(trial_Order = row_number())) %>%
mutate(Frec = "1k")
dir_4k <- "./Data_4k"
data_4k <-
list.files(path=dir_4k, pattern = "*.csv",full.names = TRUE) %>%
map_df(~fread(.)%>% mutate(trial_Order = row_number())) %>%
mutate(Frec = "4k")
data <- rbind(data_1k, data_4k)
rm(dir_1k,dir_4k)
data$condicion[data$condicion==0] <- "WW"
data$condicion[data$condicion==1] <- "LL"
data$condicion[data$condicion==2] <- "HH"
data$distancia <- log(data$distancia)
data$respuesta <- log(data$respuesta)
data_clean <- tibble()
Nsubs <- unique(data$nsub)
Conds <- unique(data$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data %>% filter(nsub==N, condicion==C)
outliers_N <- outliers_mcd(x=cbind(data_N$distancia,data_N$respuesta))
outliers_list <- outliers_N$outliers_val
# Eliminar outliers multivariados!
outliers_index <-  which(data_N$distancia%in%outliers_list$X1 &
data_N$respuesta%in%outliers_list$X2)
if (length(outliers_index)!=0){
data_N <- data_N[-outliers_index, ]
}
data_clean <- rbind(data_clean,data_N)
}
}
rm(data_N,outliers_list,outliers_N,outliers_index,C,Conds,N,Nsubs)
slopes_clean <- tibble()
Nsubs <- unique(data_clean$nsub)
Conds <- unique(data_clean$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data_clean %>% filter(nsub==N, condicion==C)
linear.model <- lm(respuesta~distancia,data_N)
data_N$slope <- linear.model$coefficients[2]
slopes_clean <- rbind(slopes_clean,data_N)
}
}
rm(data_N,C,Conds,N,Nsubs, linear.model)
slopes_clean <- slopes_clean %>%
summarise(nsub, bloque, condicion, slope, Frec) %>%
unique()
plt_1k_slope <- ggplot(slopes_clean%>% filter(Frec=="1k"), aes(x=condicion, y=slope, color=condicion)) +
geom_boxplot()+
labs(title="Slopes 1k")+
theme_minimal()
plt_4k_slope <- ggplot(slopes_clean%>% filter(Frec=="4k"), aes(x=condicion, y=slope, color=condicion)) +
geom_boxplot()+
labs(title="Slopes 4k")+
theme_minimal()
ggarrange(plt_1k_slope,plt_4k_slope, common.legend = TRUE)
slope_1k_WW <- slopes_clean %>% filter(Frec=="1k", condicion=="WW")
slope_1k_LL <- slopes_clean %>% filter(Frec=="1k", condicion=="LL")
slope_4k_WW <- slopes_clean %>% filter(Frec=="4k", condicion=="WW")
slope_4k_LL <- slopes_clean %>% filter(Frec=="4k", condicion=="LL")
outliers <-outliers_mad(slope_1k_WW$slope)
outliers$limits[2]
slope_1k_WW<- slope_1k_WW[slope_1k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LL$slope)
outliers$limits[2]
slope_1k_LL<- slope_1k_LL[slope_1k_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_4k_WW$slope)
outliers$limits[2]
slope_4k_WW<- slope_1k_WW[slope_4k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_4k_LL$slope)
outliers$limits[2]
slope_4k_LL<- slope_4k_LL[slope_4k_LL$slope<outliers$limits[2],]
t.test(x=slope_1k_WW$slope, slope_1k_LL$slope)
t.test(x=slope_4k_WW$slope, slope_4k_LL$slope)
#summary(lm(slope~condicion+Frec,data=slopes_clean))
View(plt_1k_slope)
View(plt_1k_slope)
View(data_clean)
View(slope_1k_LL)
View(slopes_clean)
View(data_clean)
ggplot(data_clean, aes(x=distancia, y=respuesta, color=condicion)) +
geom_point() +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean, aes(x=distancia, y=respuesta, color=condicion)) +
geom_point() +
geom_smooth(method = lm) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == 1k), aes(x=distancia, y=respuesta, color=condicion)) +
ggplot(data_clean %>% filter(Frec == '1k'), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point() +
geom_smooth(method = lm) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k'), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k'), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/10) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k'), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/5) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k'), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/5, shape = 0.5) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k'), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/5, size = 0.5) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k'), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size = 1) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=10) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1, shape=condicion) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1, shape= factor(condicion)) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1, shape=factor(condicion)) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion, shape=factor(condicion))) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion, shape=factor(condicion))) +
geom_point(alpha = 1, size = 2) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0), aes(x=distancia, y=respuesta, color=condicion)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0, condicion == LL), aes(x=distancia, y=respuesta, color=nsub)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0, condicion == 'LL'), aes(x=distancia, y=respuesta, color=nsub)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0, condicion == 'LL'), aes(x=distancia, y=respuesta, color=as.character(nsub))) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0, condicion == 'WW'), aes(x=distancia, y=respuesta, color=as.character(nsub))) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0, condicion == 'WW'), aes(x=distancia, y=respuesta, shape=as.character(nsub))) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0, condicion == 'WW'), aes(x=distancia, y=respuesta, color=as.character(nsub))) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
theme_minimal()
ggplot(data_clean %>% filter(Frec == '1k', respuesta > 0, condicion == 'WW'), aes(x=distancia, y=respuesta)) +
geom_point(alpha = 1/2, size = 1) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme_minimal()
View(data)
View(data)
View(slope_1k_LL)
View(data)
install.packages('fastmap')
install.packages("fastmap")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(here)
library(ggplot2)
library(plotrix)
library(segmented)
library(Routliers)
library(tidyverse)
library(ggpubr)
library(car)
library(data.table)
library(lme4)
library(nlme)
library(emmeans)
library(sjstats)
library(lmerTest)
library(MuMIn)
library(nortest)
