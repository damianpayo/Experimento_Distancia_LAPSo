facet_wrap(~freq+condicion, labeller = "label_value")+
#label_value(labels= c('Wide Band', 'Low Pass', 'High Pass'))+
theme_minimal()
ggplot(data_clean, aes(x=dist_log, y=res, color=condicion))+
geom_point()+
geom_hline(yintercept = 0)+
facet_wrap(~freq+condicion)+
theme_minimal()
slope_1k_WW <- data_slopes %>% filter(freq=="1k", condicion=="WW")
slope_1k_LL <- data_slopes %>% filter(freq=="1k", condicion=="LL")
slope_1k_HH <- data_slopes %>% filter(freq=="1k", condicion=="HH")
slope_4k_WW <- data_slopes %>% filter(freq=="4k", condicion=="WW")
slope_4k_LL <- data_slopes %>% filter(freq=="4k", condicion=="LL")
slope_4k_HH <- data_slopes %>% filter(freq=="4k", condicion=="HH")
# 1k
outliers <-outliers_mad(slope_1k_WW$slope)
#outliers$limits[2]
slope_1k_WW<- slope_1k_WW[slope_1k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LL$slope)
#outliers$limits[2]
slope_1k_LL<- slope_1k_LL[slope_1k_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_HH$slope)
#outliers$limits[2]
slope_1k_HH<- slope_1k_HH[slope_1k_HH$slope<outliers$limits[2],]
# 4k
outliers <-outliers_mad(slope_4k_WW$slope)
#outliers$limits[2]
slope_4k_WW<- slope_4k_WW[slope_4k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_4k_LL$slope)
#outliers$limits[2]
slope_4k_LL<- slope_4k_LL[slope_4k_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_4k_HH$slope)
#outliers$limits[2]
slope_4k_HH<- slope_4k_HH[slope_4k_HH$slope<outliers$limits[2],]
data_slopes_clean <- (rbind(slope_1k_HH,slope_1k_LL,slope_1k_WW,
slope_4k_HH,slope_4k_LL,slope_4k_WW))
count_conditions <- data_slopes_clean %>%
group_by(nsub) %>%
summarise(n = n())
drops <- count_conditions %>% subset(n!=3)
data_slopes_clean <- data_slopes_clean[!(data_slopes_clean$nsub%in%
drops$nsub), ]
data_clean <- data_clean[!(data_clean$nsub%in%
drops$nsub), ]
rm(count_conditions, outliers)
rm(slope_1k_HH, slope_1k_LL,slope_1k_WW,
slope_4k_HH,slope_4k_LL,slope_4k_WW)
View(data_slopes_clean)
slope_1k_WW <- data_slopes %>% filter(freq=="1k", condicion=="WW")
slope_1k_LL <- data_slopes %>% filter(freq=="1k", condicion=="LL")
slope_1k_WL <- data_slopes %>% filter(freq=="1k", condicion=="WL")
slope_1k_LW <- data_slopes %>% filter(freq=="1k", condicion=="LW")
slope_1k_WW <- data_slopes %>% filter(freq=="1k", condicion=="WW")
slope_1k_LL <- data_slopes %>% filter(freq=="1k", condicion=="LL")
slope_1k_WL <- data_slopes %>% filter(freq=="1k", condicion=="WL")
slope_1k_LW <- data_slopes %>% filter(freq=="1k", condicion=="LW")
# 1k
outliers <-outliers_mad(slope_1k_WW$slope)
#outliers$limits[2]
slope_1k_WW<- slope_1k_WW[slope_1k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LL$slope)
#outliers$limits[2]
slope_1k_LL<- slope_1k_LL[slope_1k_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_WL$slope)
#outliers$limits[2]
slope_1k_WL<- slope_1k_WL[slope_1k_WL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LW$slope)
#outliers$limits[2]
slope_1k_LW<- slope_1k_LW[slope_1k_LW$slope<outliers$limits[2],]
data_slopes_clean <- (rbind(slope_1k_LL,slope_1k_WW,
slope_1k_LW,slope_1k_WL))
count_conditions <- data_slopes_clean %>%
group_by(nsub) %>%
summarise(n = n())
drops <- count_conditions %>% subset(n!=4)
data_slopes_clean <- data_slopes_clean[!(data_slopes_clean$nsub%in%
drops$nsub), ]
data_clean <- data_clean[!(data_clean$nsub%in%
drops$nsub), ]
rm(count_conditions, outliers)
rm(slope_1k_HH, slope_1k_LL,slope_1k_WW,
slope_4k_HH,slope_4k_LL,slope_4k_WW)
dir_1k_DR <- "./Data_1k_DR"
data_1k_DR <-
list.files(path=dir_1k_DR, pattern = "*.csv",full.names = TRUE) %>%
map_df(~fread(.) %>% mutate(trial_Order = row_number())) %>%
mutate(freq = "1k")
rm(dir_1k_DR)
# Corregimos la columna de condicion con una etiqueta mas legible
# WW -> Sin filtro
# LL -> Filtro pasa-bajo
# HH -> Filtro pasa-alto
data_1k_DR$condicion[data_1k_DR$condicion==0] <- "WW"
data_1k_DR$condicion[data_1k_DR$condicion==1] <- "LL"
data_1k_DR$condicion[data_1k_DR$condicion==2] <- "LW"
data_1k_DR$condicion[data_1k_DR$condicion==3] <- "WL"
orden_bloques <- read.csv("./orden_bloques.csv")
data_1k_DR <- merge(x=orden_bloques,y=data_1k_DR,
by=c("nsub","condicion"))
# Erase redundant columns
data_1k_DR <- data_1k_DR[, !names(data_1k_DR) %in% c("bloque","altura")]
rm(orden_bloques)
data_1k_DR$dist_log <- log10(data_1k_DR$distancia)
data_1k_DR$resp_log <- log10(data_1k_DR$respuesta)
data_clean <- tibble()
Nsubs <- unique(data_1k_DR$nsub)
Conds <- unique(data_1k_DR$condicion)
for (N in Nsubs[!Nsubs %in% c(1,18,55)]){
for (C in Conds){
data_N <- data_1k_DR %>% filter(nsub==N, condicion==C)
outliers_N <- outliers_mcd(x = cbind(data_N$dist_log,data_N$resp_log))
outliers_list <- outliers_N$outliers_val
# Eliminar outliers multivariados!
outliers_index <-  which(data_N$dist_log%in%outliers_list$X1 &
data_N$resp_log%in%outliers_list$X2)
if (length(outliers_index)!=0){
data_N <- data_N[-outliers_index, ]
}
data_clean <- rbind(data_clean,data_N)
}
}
rm(data_N,outliers_list,outliers_N,outliers_index,C,Conds,N,Nsubs)
data_slopes <- tibble()
sresids <- vector()
Nsubs <- unique(data_clean$nsub)
Conds <- unique(data_clean$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data_clean %>% filter(nsub==N, condicion==C)
linear.model <- lm(resp_log~dist_log,data_N)
data_N$slope <- linear.model$coefficients[2]
data_N$intercept <- linear.model$coefficients[1]
data_N$res <- as.vector(rstandard(linear.model))
data_slopes <- rbind(data_slopes,data_N)
sresids <- append(sresids, as.vector(rstandard(linear.model)))
}
}
rm(data_N,C,Conds,N,Nsubs, linear.model)
data_clean <- data_slopes
data_slopes <- data_slopes %>%
summarise(nsub, condicion, orden_bloque, slope, intercept, freq) %>%
unique()
slope_1k_WW <- data_slopes %>% filter(freq=="1k", condicion=="WW")
slope_1k_LL <- data_slopes %>% filter(freq=="1k", condicion=="LL")
slope_1k_WL <- data_slopes %>% filter(freq=="1k", condicion=="WL")
slope_1k_LW <- data_slopes %>% filter(freq=="1k", condicion=="LW")
# 1k
outliers <-outliers_mad(slope_1k_WW$slope)
#outliers$limits[2]
slope_1k_WW<- slope_1k_WW[slope_1k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LL$slope)
#outliers$limits[2]
slope_1k_LL<- slope_1k_LL[slope_1k_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_WL$slope)
#outliers$limits[2]
slope_1k_WL<- slope_1k_WL[slope_1k_WL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LW$slope)
#outliers$limits[2]
slope_1k_LW<- slope_1k_LW[slope_1k_LW$slope<outliers$limits[2],]
data_slopes_clean <- (rbind(slope_1k_LL,slope_1k_WW,
slope_1k_LW,slope_1k_WL))
count_conditions <- data_slopes_clean %>%
group_by(nsub) %>%
summarise(n = n())
drops <- count_conditions %>% subset(n!=4)
data_slopes_clean <- data_slopes_clean[!(data_slopes_clean$nsub%in%
drops$nsub), ]
data_clean <- data_clean[!(data_clean$nsub%in%
drops$nsub), ]
rm(count_conditions, outliers)
rm(slope_1k_HH, slope_1k_LL,slope_1k_WW,
slope_4k_HH,slope_4k_LL,slope_4k_WW)
normality_slopes <- data_slopes_clean %>%
group_by(freq, condicion) %>%
summarise(statistic = shapiro.test(slope)$statistic,
p.value = shapiro.test(slope)$p.value,
normality=(p.value>0.05))
normality_slopes
cols <- c("#455A64", "#90A4AE", "#CFD8DC" )
plt_1k_slope <- ggplot(data_slopes_clean %>%
filter(freq=="1k"),
aes(x=condicion, y=slope, fill=condicion)) +
stat_boxplot(geom = "errorbar",
width = 0.25) +
geom_boxplot(alpha=0.8, outlier.colour=NA, width = 0.4)+
scale_x_discrete(limits = c('WW', 'LL', 'HH'),
labels = c('Wide Band', 'Low Pass', 'High Pass')) +
scale_fill_manual(values = cols, guide='none') +
scale_y_continuous(limits=c(0,2)) +
labs(title="Cut frequency = 1 kHz", y='Slopes')+
annotate("text", x = 1.5, y = 1.6,  label = "***", size = 4) +
annotate("segment", x = 0.7, xend = 2.2, y = 1.55,
yend = 1.55, colour = "black", size=.3, alpha=1,) +
annotate("text", x = 2.5, y = 1.8,  label = "***", size = 4) +
annotate("segment", x = 1.75, xend = 3.2, y = 1.75,
yend = 1.75, colour = "black", size=.3, alpha=1,) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5))
plt_4k_slope <- ggplot(data_slopes_clean %>%
filter(freq=="4k" & slope < 1.6),
aes(x=condicion, y=slope, fill=condicion)) +
stat_boxplot(geom = "errorbar",
width = 0.25) +
geom_boxplot(alpha = 0.8, outlier.colour=NA, width = 0.4)+
scale_x_discrete(limits = c('WW', 'LL', 'HH'),
labels = c('Wide Band', 'Low Pass', 'High Pass')) +
scale_fill_manual(values = cols, guide='none') +
scale_y_continuous(limits=c(0,2)) +
labs(title="Cut frequency = 4 kHz")+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 10, hjust = 0.5))
ggarrange(plt_1k_slope,plt_4k_slope, common.legend = TRUE)
cols <- c("#455A64", "#90A4AE", "#CFD8DC" )
plt_1k_slope <- ggplot(data_slopes_clean %>%
filter(freq=="1k"),
aes(x=condicion, y=slope, fill=condicion)) +
stat_boxplot(geom = "errorbar",
width = 0.25) +
#geom_boxplot(alpha=0.8, outlier.colour=NA, width = 0.4)+
#scale_x_discrete(limits = c('WW', 'LL', 'WL','LW'),
#                 labels = c('Wide Band', 'Low Pass', 'High Pass')) +
#scale_fill_manual(values = cols, guide='none') +
scale_y_continuous(limits=c(0,2)) +
labs(title="Cut frequency = 1 kHz", y='Slopes')+
annotate("text", x = 1.5, y = 1.6,  label = "***", size = 4) +
annotate("segment", x = 0.7, xend = 2.2, y = 1.55,
yend = 1.55, colour = "black", size=.3, alpha=1,) +
annotate("text", x = 2.5, y = 1.8,  label = "***", size = 4) +
annotate("segment", x = 1.75, xend = 3.2, y = 1.75,
yend = 1.75, colour = "black", size=.3, alpha=1,) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5))
plt_1k_slope
cols <- c("#455A64", "#90A4AE", "#CFD8DC" )
plt_1k_slope <- ggplot(data_slopes_clean %>%
filter(freq=="1k"),
aes(x=condicion, y=slope, fill=condicion)) +
stat_boxplot(geom = "errorbar",
width = 0.25) +
#geom_boxplot(alpha=0.8, outlier.colour=NA, width = 0.4)+
#scale_x_discrete(limits = c('WW', 'LL', 'WL','LW'),
#                 labels = c('Wide Band', 'Low Pass', 'High Pass')) +
#scale_fill_manual(values = cols, guide='none') +
scale_y_continuous(limits=c(0,2)) +
labs(title="Cut frequency = 1 kHz", y='Slopes')+
#annotate("text", x = 1.5, y = 1.6,  label = "***", size = 4) +
#annotate("segment", x = 0.7, xend = 2.2, y = 1.55,
#         yend = 1.55, colour = "black", size=.3, alpha=1,) +
#annotate("text", x = 2.5, y = 1.8,  label = "***", size = 4) +
#annotate("segment", x = 1.75, xend = 3.2, y = 1.75,
#         yend = 1.75, colour = "black", size=.3, alpha=1,) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5))
plt_1k_slope
cols <- c("#455A64", "#90A4AE", "#CFD8DC" )
plt_1k_slope <- ggplot(data_slopes_clean %>%
filter(freq=="1k"),
aes(x=condicion, y=slope, fill=condicion)) +
stat_boxplot(geom = "errorbar",
width = 0.25) +
geom_boxplot(alpha=0.8, outlier.colour=NA, width = 0.4)+
#scale_x_discrete(limits = c('WW', 'LL', 'WL','LW'),
#                 labels = c('Wide Band', 'Low Pass', 'High Pass')) +
#scale_fill_manual(values = cols, guide='none') +
scale_y_continuous(limits=c(0,2)) +
labs(title="Cut frequency = 1 kHz", y='Slopes')+
#annotate("text", x = 1.5, y = 1.6,  label = "***", size = 4) +
#annotate("segment", x = 0.7, xend = 2.2, y = 1.55,
#         yend = 1.55, colour = "black", size=.3, alpha=1,) +
#annotate("text", x = 2.5, y = 1.8,  label = "***", size = 4) +
#annotate("segment", x = 1.75, xend = 3.2, y = 1.75,
#         yend = 1.75, colour = "black", size=.3, alpha=1,) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5))
plt_1k_slope
data_prom <- data_clean %>%
group_by(condicion, dist_log, freq) %>%
summarise(condicion,
distancia,
respuesta,
prom_lin = mean(respuesta),
sd_lin = sd(respuesta),
std_lin = std.error(respuesta),
dist_log,
resp_log,
prom_log = mean(resp_log),
sd_log = sd(resp_log),
std_log = std.error(resp_log),
freq)
G_Prom <- ggplot(data_prom,
aes(x=distancia, y=prom_lin,
color = condicion)) +
geom_point() +
geom_smooth(se = FALSE) +
# scale_x_log10() +
# scale_y_log10() +
geom_errorbar(aes(ymin=prom_lin-std_lin,
ymax=prom_lin+std_lin),
width = 0.2) +
# facet_grid(rows = vars(ID)) +
labs(title = paste0("Promedio y Barras de Error")) +
theme_minimal()
G_Prom
G_Prom
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = slopes_1k_clean)
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = slopes_clean)
lmer.1k <- lmer(slope ~ condicion + (1|nsub),
data = data_slopes_clean)
summary(lmer.1k)
anova(lmer.1k)
##partial eta sq
effectsize::eta_squared(lmer.1k, partial = TRUE)
#Rsq
r.squaredGLMM(lmer.1k)
emmeans(lmer.1k,
list(pairwise ~ condicion),
adjust="bonferroni")
qqnorm(resid(lmer.1k))
Nsubs <- unique(data_1k_DR$nsub)
Nsubs[!Nsubs %in% c(1,18,55) & !Nsubs>28 ]
Nsubs[!Nsubs %in% c(1,18,55) & Nsubs>28 ]
dir_1k_DR <- "./Data_1k_DR"
data_1k_DR <-
list.files(path=dir_1k_DR, pattern = "*.csv",full.names = TRUE) %>%
map_df(~fread(.) %>% mutate(trial_Order = row_number())) %>%
mutate(freq = "1k")
rm(dir_1k_DR)
# Corregimos la columna de condicion con una etiqueta mas legible
# WW -> Sin filtro
# LL -> Filtro pasa-bajo
# HH -> Filtro pasa-alto
data_1k_DR$condicion[data_1k_DR$condicion==0] <- "WW"
data_1k_DR$condicion[data_1k_DR$condicion==1] <- "LL"
data_1k_DR$condicion[data_1k_DR$condicion==2] <- "LW"
data_1k_DR$condicion[data_1k_DR$condicion==3] <- "WL"
orden_bloques <- read.csv("./orden_bloques.csv")
data_1k_DR <- merge(x=orden_bloques,y=data_1k_DR,
by=c("nsub","condicion"))
# Erase redundant columns
data_1k_DR <- data_1k_DR[, !names(data_1k_DR) %in% c("bloque","altura")]
rm(orden_bloques)
data_1k_DR$dist_log <- log10(data_1k_DR$distancia)
data_1k_DR$resp_log <- log10(data_1k_DR$respuesta)
data_clean <- tibble()
Nsubs <- unique(data_1k_DR$nsub)
Conds <- unique(data_1k_DR$condicion)
for (N in Nsubs[!Nsubs %in% c(1,18,55) & Nsubs>28 ]){
for (C in Conds){
data_N <- data_1k_DR %>% filter(nsub==N, condicion==C)
outliers_N <- outliers_mcd(x = cbind(data_N$dist_log,data_N$resp_log))
outliers_list <- outliers_N$outliers_val
# Eliminar outliers multivariados!
outliers_index <-  which(data_N$dist_log%in%outliers_list$X1 &
data_N$resp_log%in%outliers_list$X2)
if (length(outliers_index)!=0){
data_N <- data_N[-outliers_index, ]
}
data_clean <- rbind(data_clean,data_N)
}
}
rm(data_N,outliers_list,outliers_N,outliers_index,C,Conds,N,Nsubs)
data_slopes <- tibble()
sresids <- vector()
Nsubs <- unique(data_clean$nsub)
Conds <- unique(data_clean$condicion)
for (N in Nsubs){
for (C in Conds){
data_N <- data_clean %>% filter(nsub==N, condicion==C)
linear.model <- lm(resp_log~dist_log,data_N)
data_N$slope <- linear.model$coefficients[2]
data_N$intercept <- linear.model$coefficients[1]
data_N$res <- as.vector(rstandard(linear.model))
data_slopes <- rbind(data_slopes,data_N)
sresids <- append(sresids, as.vector(rstandard(linear.model)))
}
}
rm(data_N,C,Conds,N,Nsubs, linear.model)
data_clean <- data_slopes
data_slopes <- data_slopes %>%
summarise(nsub, condicion, orden_bloque, slope, intercept, freq) %>%
unique()
data_clean <- data_clean[!(data_clean$nsub==3), ]
data_slopes <- data_slopes[!(data_slopes$nsub==3), ]
# Histogram & QQ Plot
hist(sresids, col='steelblue', main='Residues',xlab="Residues")
qqnorm(sresids, main='Normal')
qqline(sresids)
#qqPlot(sresids)
normality_test <- data_clean %>%
group_by(nsub, condicion) %>%
summarise(statistic = shapiro.test(res)$statistic,
p.value = shapiro.test(res)$p.value)
normality_test%>%subset(p.value<0.05)
## residuos ploteados en dos ejes, para poder ver la variabilidad por
## distancia por condicion por frecuencia.6 figuras en total
cols <- c("#455A64", "#90A4AE", "#CFD8DC" )
ggplot(data_clean, aes(x=res, fill=condicion))+
geom_histogram(binwidth = 0.2)+
scale_fill_manual(values = cols,
limits = c('WW', 'LL', 'HH'),
labels = c('Wide Band', 'Low Pass', 'High Pass')) +
labs(y='Slopes', x="Residuals", fill="Condition")+
facet_wrap(~freq+condicion, labeller = "label_value")+
#label_value(labels= c('Wide Band', 'Low Pass', 'High Pass'))+
theme_minimal()
ggplot(data_clean, aes(x=dist_log, y=res, color=condicion))+
geom_point()+
geom_hline(yintercept = 0)+
facet_wrap(~freq+condicion)+
theme_minimal()
slope_1k_WW <- data_slopes %>% filter(freq=="1k", condicion=="WW")
slope_1k_LL <- data_slopes %>% filter(freq=="1k", condicion=="LL")
slope_1k_WL <- data_slopes %>% filter(freq=="1k", condicion=="WL")
slope_1k_LW <- data_slopes %>% filter(freq=="1k", condicion=="LW")
# 1k
outliers <-outliers_mad(slope_1k_WW$slope)
#outliers$limits[2]
slope_1k_WW<- slope_1k_WW[slope_1k_WW$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LL$slope)
#outliers$limits[2]
slope_1k_LL<- slope_1k_LL[slope_1k_LL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_WL$slope)
#outliers$limits[2]
slope_1k_WL<- slope_1k_WL[slope_1k_WL$slope<outliers$limits[2],]
outliers <-outliers_mad(slope_1k_LW$slope)
#outliers$limits[2]
slope_1k_LW<- slope_1k_LW[slope_1k_LW$slope<outliers$limits[2],]
data_slopes_clean <- (rbind(slope_1k_LL,slope_1k_WW,
slope_1k_LW,slope_1k_WL))
count_conditions <- data_slopes_clean %>%
group_by(nsub) %>%
summarise(n = n())
drops <- count_conditions %>% subset(n!=4)
data_slopes_clean <- data_slopes_clean[!(data_slopes_clean$nsub%in%
drops$nsub), ]
data_clean <- data_clean[!(data_clean$nsub%in%
drops$nsub), ]
rm(count_conditions, outliers)
rm(slope_1k_HH, slope_1k_LL,slope_1k_WW,
slope_4k_HH,slope_4k_LL,slope_4k_WW)
normality_slopes <- data_slopes_clean %>%
group_by(freq, condicion) %>%
summarise(statistic = shapiro.test(slope)$statistic,
p.value = shapiro.test(slope)$p.value,
normality=(p.value>0.05))
normality_slopes
cols <- c("#455A64", "#90A4AE", "#CFD8DC" )
plt_1k_slope <- ggplot(data_slopes_clean %>%
filter(freq=="1k"),
aes(x=condicion, y=slope, fill=condicion)) +
stat_boxplot(geom = "errorbar",
width = 0.25) +
geom_boxplot(alpha=0.8, outlier.colour=NA, width = 0.4)+
#scale_x_discrete(limits = c('WW', 'LL', 'WL','LW'),
#                 labels = c('Wide Band', 'Low Pass', 'High Pass')) +
#scale_fill_manual(values = cols, guide='none') +
scale_y_continuous(limits=c(0,2)) +
labs(title="Cut frequency = 1 kHz", y='Slopes')+
#annotate("text", x = 1.5, y = 1.6,  label = "***", size = 4) +
#annotate("segment", x = 0.7, xend = 2.2, y = 1.55,
#         yend = 1.55, colour = "black", size=.3, alpha=1,) +
#annotate("text", x = 2.5, y = 1.8,  label = "***", size = 4) +
#annotate("segment", x = 1.75, xend = 3.2, y = 1.75,
#         yend = 1.75, colour = "black", size=.3, alpha=1,) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5))
plt_1k_slope
ggplot(data_clean %>% filter(freq == '1k'), aes(x=dist_log, y=resp_log, color=condicion)) +
scale_color_manual(values = cols, labels = c('Wide Band', 'Low Pass', 'High Pass')) +
geom_smooth(method = lm, se = FALSE, size=0.5) +
facet_wrap(~nsub) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5)) +
theme_minimal()
data_prom <- data_clean %>%
group_by(condicion, dist_log, freq) %>%
summarise(condicion,
distancia,
respuesta,
prom_lin = mean(respuesta),
sd_lin = sd(respuesta),
std_lin = std.error(respuesta),
dist_log,
resp_log,
prom_log = mean(resp_log),
sd_log = sd(resp_log),
std_log = std.error(resp_log),
freq)
G_Prom <- ggplot(data_prom,
aes(x=distancia, y=prom_lin,
color = condicion)) +
geom_point() +
geom_smooth(se = FALSE) +
# scale_x_log10() +
# scale_y_log10() +
geom_errorbar(aes(ymin=prom_lin-std_lin,
ymax=prom_lin+std_lin),
width = 0.2) +
# facet_grid(rows = vars(ID)) +
labs(title = paste0("Promedio y Barras de Error")) +
theme_minimal()
G_Prom
G_Prom
